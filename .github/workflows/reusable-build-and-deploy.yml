name: Reusable - Deploy to Amazon ECS

on:
  workflow_call:
    inputs:
      app-path:
        required: true
        type: string
      aws-region:
        required: true
        type: string
      codedeploy-application-name:
        required: true
        type: string
      codedeploy-deployment-group-name:
        required: true
        type: string
      container-name:
        required: true
        type: string
      container-port:
        required: true
        type: number
      ecr-repository-name:
        required: true
        type: string
      ecs-cluster-name:
        required: true
        type: string
      ecs-service-name:
        required: true
        type: string
      ecs-task-definition-file:
        required: false
        type: string
        default: task-definition.json
      terraform-app-path:
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
  
env:
  CODEDEPLOY_APPLICATION_NAME: ${{ inputs.codedeploy-application-name }}
  CODEDEPLOY_DEPLOYMENT_GROUP_NAME: ${{ inputs.codedeploy-deployment-group-name }}
  CONTAINER_NAME: ${{ inputs.container-name }}
  CONTAINER_PORT: ${{ inputs.container-port }}
  ECR_REPOSITORY_NAME: ${{ inputs.ecr-repository-name }}
  ECS_CLUSTER_NAME: ${{ inputs.ecs-cluster-name }}
  ECS_SERVICE_NAME: ${{ inputs.ecs-service-name }}
  ECS_TASK_DEFINITION_FILE: ${{ inputs.ecs-task-definition-file }}

jobs:
  infra-terraform:
    uses: olegon/terraform-ecs-deployment-types/.github/workflows/reusable-terraform.yml@main
    with:
      aws-region: ${{ inputs.aws-region }}
      terraform-directory-path: app/infra
    secrets: inherit

  app-build-and-publish:
    name: App - Build and publish
    needs:
      - infra-terraform
    environment: production
    runs-on: ubuntu-latest
    steps:
      - name: Github -> Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.aws-region }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        working-directory: ${{ inputs.app-path }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_NAME:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_NAME:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY_NAME:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Get task definition
        id: get-task-definition
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          aws ecs describe-task-definition \
            --task-definition "$ECS_SERVICE_NAME" \
            --query taskDefinition > "$ECS_TASK_DEFINITION_FILE"

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION_FILE }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Print task definition
        id: print-task-definition
        env:
          TASK_DEFINITION_PATH: ${{ steps.task-def.outputs.task-definition }}
        run: |
          cat "$TASK_DEFINITION_PATH"

      - name: Create appspec file
        id: create-appspec-file
        run: |
          echo '{ "version": 0.0, "Resources": [ { "TargetService": { "Type": "AWS::ECS::Service", "Properties": { "TaskDefinition": "ARN_WILL_BE_FILLED_ON_CICD_PIPELINE", "LoadBalancerInfo": { "ContainerName": "$CONTAINER_NAME", "ContainerPort": "$CONTAINER_PORT" } } } } ] }' | envsubst > appspec.json
          cat appspec.json

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE_NAME }}
          cluster: ${{ env.ECS_CLUSTER_NAME }}
          wait-for-service-stability: true
          codedeploy-appspec: appspec.json
          codedeploy-application: ${{ env.CODEDEPLOY_APPLICATION_NAME }}
          codedeploy-deployment-group: ${{ env.CODEDEPLOY_DEPLOYMENT_GROUP_NAME }}
